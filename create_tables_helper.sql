DROP PROCEDURE IF EXISTS CREATE_KUNDE;
DROP PROCEDURE IF EXISTS CREATE_BESTELLUNG;
DROP PROCEDURE IF EXISTS CREATE_REZEPT_BESTELLUNG;
DROP PROCEDURE IF EXISTS CREATE_REZEPT;
DROP PROCEDURE IF EXISTS CREATE_REZEPT_ZUTAT;
DROP PROCEDURE IF EXISTS CREATE_ADRESSE;
DROP PROCEDURE IF EXISTS CREATE_LIEFERANT;
DROP PROCEDURE IF EXISTS CREATE_ZUTAT;
DROP PROCEDURE IF EXISTS CREATE_ZUTAT_BESCHRAENKUNG;
DROP PROCEDURE IF EXISTS CREATE_BESCHRAENKUNG;
DROP PROCEDURE IF EXISTS CREATE_ZUTAT_ERNAEHRUNGSKATEGORIE;
DROP PROCEDURE IF EXISTS CREATE_ERNAEHRUNGSKATEGORIE;
DROP PROCEDURE IF EXISTS CREATE_NAEHRSTOFFANGABE;

DELIMITER /

CREATE PROCEDURE CREATE_KUNDE ()
BEGIN
	CREATE TABLE KUNDE(
		KundeId INT PRIMARY KEY
		, AdresseId INT
		, Vorname VARCHAR (20)
		, Nachname VARCHAR (50)
		, Geburtsdatum DATE
		, TelefonNr VARCHAR (15)
		, Email VARCHAR (50)
	);
END; /

CREATE PROCEDURE CREATE_BESTELLUNG ()
BEGIN
	CREATE TABLE BESTELLUNG(
		BestellungId INT PRIMARY KEY
		, KundeId INT
		, Gesamtpreis DOUBLE (10,2)
		, Bestelldatum DATE
	);
END; /

CREATE PROCEDURE CREATE_REZEPT_BESTELLUNG ()
BEGIN
	CREATE TABLE REZEPT_BESTELLUNG(
		BestellungId INT NOT NULL
		, RezeptId INT NOT NULL
		, Menge INT
	);
END; /

CREATE PROCEDURE CREATE_REZEPT ()
BEGIN
	CREATE TABLE REZEPT(
		RezeptId INT PRIMARY KEY
		, Titel VARCHAR(50)
   	, Beschreibung VARCHAR (255)
   	, Zubereitung TEXT
		, Zubereitungszeit VARCHAR(15)
		, Portionen INT
	);
END; /

CREATE PROCEDURE CREATE_REZEPT_ZUTAT ()
BEGIN
	CREATE TABLE REZEPT_ZUTAT(
		RezeptId INT NOT NULL
		, ZutatId INT NOT NULL
		, Menge DOUBLE (5,2)
	);
END; /

CREATE PROCEDURE CREATE_ADRESSE ()
BEGIN
	CREATE TABLE ADRESSE(
		AdresseId INT PRIMARY KEY
		, Strasse VARCHAR(50)
		, HausNr VARCHAR(4)
		, Adresszusatz VARCHAR(4)
		, PLZ VARCHAR(10)
		, Stadt VARCHAR(50)
	);
END; /

CREATE PROCEDURE CREATE_LIEFERANT ()
BEGIN
	CREATE TABLE LIEFERANT(
		LieferantId INT PRIMARY KEY
		, AdresseId INT
		, LieferantName VARCHAR(50)
		, TelefonNr VARCHAR(15)
		, Email VARCHAR(50)
	);
END; /

CREATE PROCEDURE CREATE_ZUTAT ()
BEGIN
	CREATE TABLE ZUTAT(
		ZutatId INT PRIMARY KEY
		, LieferantId INT
		, NaehrstoffangabeId INT
		, Bezeichnung VARCHAR(40)
		, Bestand DOUBLE(4,2)
		, Nettopreis DOUBLE(5,2)
		, CO2AequivalentProKg DOUBLE(10,4)
	);
END; /

CREATE PROCEDURE CREATE_ZUTAT_BESCHRAENKUNG ()
BEGIN
	CREATE TABLE ZUTAT_BESCHRAENKUNG (
		BeschraenkungId INT NOT NULL
		, ZutatId INT NOT NULL
	);
END; /

CREATE PROCEDURE CREATE_BESCHRAENKUNG ()
BEGIN
	CREATE TABLE BESCHRAENKUNG(
		BeschraenkungId INT PRIMARY KEY
		, BeschraenkungTyp VARCHAR(50)
	);
END; /

CREATE PROCEDURE CREATE_ZUTAT_ERNAEHRUNGSKATEGORIE ()
BEGIN
	CREATE TABLE ZUTAT_ERNAEHRUNGSKATEGORIE(
		ErnaehrungskategorieId INT NOT NULL
		, ZutatId INT NOT NULL
	);
END; /

CREATE PROCEDURE CREATE_ERNAEHRUNGSKATEGORIE ()
BEGIN
	CREATE TABLE ERNAEHRUNGSKATEGORIE(
		ErnaehrungskategorieId INT PRIMARY KEY
		, ErnaehrungkategorieTyp VARCHAR(50)
	);
END; /

CREATE PROCEDURE CREATE_NAEHRSTOFFANGABE()
BEGIN
	CREATE TABLE NAEHRSTOFFANGABE (
		NaehrstoffangabeId INT PRIMARY KEY
		, KalorienPro100g DOUBLE(4,2)
		, ProteinePro100g DOUBLE(4,2)
		, KohlenhydratePro100g DOUBLE(4,2)
		, ZuckerPro100g DOUBLE(4,2)
		, FettPro100g DOUBLE(4,2)
		, GesaettigteFettSaeurenPro100g DOUBLE(4,2)
		, BallaststoffePro100g DOUBLE(4,2)
		, NatriumPro100g DOUBLE(4,2)
	);
END; /

DELIMITER ;

CALL CREATE_KUNDE;
CALL CREATE_BESTELLUNG;
CALL CREATE_REZEPT_BESTELLUNG;
CALL CREATE_REZEPT;
CALL CREATE_REZEPT_ZUTAT;
CALL CREATE_ADRESSE;
CALL CREATE_LIEFERANT;
CALL CREATE_ZUTAT;
CALL CREATE_ZUTAT_BESCHRAENKUNG;
CALL CREATE_BESCHRAENKUNG;
CALL CREATE_ZUTAT_ERNAEHRUNGSKATEGORIE;
CALL CREATE_ERNAEHRUNGSKATEGORIE;
CALL CREATE_NAEHRSTOFFANGABE;